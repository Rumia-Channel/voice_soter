name: build-and-upload-binaries

on:
  release:
    types: [published, released, edited]

permissions:
  contents: write

jobs:
  build:
    name: build-on-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            archive: tar.gz
          - os: macos-latest
            archive: zip
          - os: windows-latest
            archive: zip

    env:
      # gh CLIはこっちを見る。Windowsでもbashでも同じ名前にしておく。
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_TAG: ${{ github.event.release.tag_name }}
      # Windowsで「depends落としていい？」って聞かせない
      NUITKA_ASSUME_YES_FOR_DOWNLOADS: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v1

      - name: Install Python with uv
        run: uv python install 3.12

      - name: Sync deps
        run: uv sync

      # =========================
      # ビルド
      # =========================
      - name: Build with Nuitka (Linux/mac)
        if: matrix.os != 'windows-latest'
        run: |
          uv run python -m nuitka \
            --standalone \
            --output-dir=build \
            --output-filename=VoiceSoter \
            --enable-plugin=pyside6 \
            --include-qt-plugins=multimedia \
            main.py

      # Windows ビルド
      - name: Build with Nuitka (Windows)
        if: matrix.os == 'windows-latest'
        # pwshで1行にするとトラブルが減る
        run: >
          uv run python -m nuitka
          --standalone
          --output-dir=build
          --output-filename=VoiceSoter.exe
          --enable-plugin=pyside6
          --include-qt-plugins=multimedia
          --assume-yes-for-downloads
          main.py
        shell: pwsh

      # =========================
      # dist名そろえ
      # =========================

      - name: Rename dist dir (Linux/mac)
        if: matrix.os != 'windows-latest'
        run: |
          cd build
          if [ -d "main.dist" ]; then
            mv main.dist VoiceSoter
          fi
        shell: bash

      # Windows: main.dist → VoiceSoter
      - name: Rename dist dir (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd build
          if (Test-Path "main.dist") {
            Rename-Item -Path "main.dist" -NewName "VoiceSoter"
          }
        shell: pwsh

      # =========================
      # アーカイブ作成
      # =========================

      - name: Archive artifact (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd build
          tar czf VoiceSoter-ubuntu-latest.tar.gz VoiceSoter

      # macOSはzip
      - name: Archive artifact (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          cd build
          zip -r VoiceSoter-macos-latest.zip VoiceSoter

      # Windowsもzip
      - name: Archive artifact (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd build
          powershell -Command "Compress-Archive -Path VoiceSoter -DestinationPath VoiceSoter-windows-latest.zip -Force"

      # =========================
      # リリースが無かったら作る
      # =========================

      - name: Ensure release exists (Linux/mac)
        if: matrix.os != 'windows-latest'
        run: |
          # あったら何もしない。なかったら空で作る。
          gh release view "$RELEASE_TAG" >/dev/null 2>&1 || \
            gh release create "$RELEASE_TAG" --title "$RELEASE_TAG" --notes ""
        shell: bash

      - name: Ensure release exists (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $tag = "${{ github.event.release.tag_name }}"
          gh release view $tag 2>$null
          if ($LASTEXITCODE -ne 0) {
            gh release create $tag --title $tag --notes ""
          }

      # =========================
      # アップロード
      # =========================

      - name: Upload to release (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd build
          gh release upload "$RELEASE_TAG" "VoiceSoter-ubuntu-latest.tar.gz" --clobber

      - name: Upload to release (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          cd build
          gh release upload "$RELEASE_TAG" "VoiceSoter-macos-latest.zip" --clobber

      - name: Upload to release (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          cd build
          $tag = "${{ github.event.release.tag_name }}"
          gh release upload $tag "VoiceSoter-windows-latest.zip" --clobber
